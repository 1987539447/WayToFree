#
#============================================================
# 符合 JavaBean
# 属性赋值转化为setter执行，可通过点号进行多级引用
# 通过$符号引用已配置的对象-实例
# 顺序问题：对象实例化和配置属性，按照配置顺序执行，对象内被新配置覆盖
#============================================================
# section:
# [main] securityManager及依赖组件 属性配置
# [users] [roles] [urls]
# $def defination ref  ,order
# users and theires roles
#============================================================
# main section
[main]
#sha256 加密 已不用
sha256Mathcer = org.apache.shrio.credential.Sha256CredentialsMatcher
# 密码是否为16进制编码
sha256.storedCredentialsHexEncoded = false
iniRealm.credentialMatcher = $sha256Matcher
# 自定义real 及配置
myRealm = com.cmopany.security.shiro.DatabaseReal
# 原始类型
myRealm.username = xx
# 对象引用
myReal.credentialMatcher = $sha256Matcher

# Authenticator 自定义实现
securityManager.authenticator = $authenticator
# 多个realm时的验证策略 验证顺序按realm配置顺序或securityManager中指定的顺序
securityManager.realms = $myRealm, $anotherRealm
authcStrategy = org.apache.shiro.pam.FirstSuccessfulStrategy
securityManager.authenticator.authenticationStategy = authcStrategy

# 自定义全局permissionResolver
globalPermissionResolver = xxx.Resolver
securityManager.authorizer.permissionResolver = $globalPermissionResolver
#配置realm 使用的permissionResolver
myRealm.permissionResolver = $permissionResolver

#自定义全局RolePermissionResolver
globalRolePermissionResolver = com.xxx.Resolver
securityManager.authorizer.RolePermissionResolver = $globalRolePermissionResolver
#配置realm使用的rolePermissionResolver

# 自定义授权者
authorizer = com.xxx.Authorizer
securityManager.authorizer = $authorizer

# 自定义sessionManager
sessionManager = com.xx.SessionManager
securityManager.sessionManager = $sessionManager
# session超时时间
securityManager.sessionManager.globalSessionTimeout = 36000000

# sessionListeners
listenerA = com.xxx.ListenerA
listenerB = com.xxx.ListenerB
securityManager.sessionManager.sessionListeners = $listenerA, $listenerB

# sessionManager 指定sessionDao
sessionDao = com.xxx.SessionDao
# Web应用不会使用本地会话管理器，需要指明配置
sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
securityManager.sessionManager = $sessionManager
securityManager.sessionManger.sessionDao = $sessionDao

# 使用Ehcache 存储session
sessionDao = org.apache.shiro.session.mgt.EnterpriseCacheSessionDao
# 指定自定义缓存名字
sessionDao.activeSessionCacheName = sessionCache
securityManager.sessionManger.sessionDao = $sessionDao
cacheManager = org.apache.shiro.cache.ehcache.EhcacheManager
cacheManager.cacheManagerConfigFile = classpath:ehcache.xml
securityManager.cacheManger = $cacheManager

# 指定session缓存 配置自定义缓存实现 或 缓存管理实现
activeSessionCache = com.xxx.CacheImpl
sessionDao.activeSessionCache = $activeSessionCache

cacheManager = com.xxx.CacheManager
sessionDao.activeSessionName = sessionCache
...
securityManager.cacheManager = $cacheManger

# 指定自定义sessionID生成器，默认使用JavaUuidGenerator
sessionIdGenerator = com.xxx.Generator
securityManager.sessionManager.sessionDao.sessionIdGenerator = $sessionIdGenerator
# session 定期验证 默认验证方式 避免无用session占用存储空间
sessionValidationScheduler = org.apache.shrio.session.mgt.ExecutorServcieValidationScheduler
# 1 hour
sessionValidationScheduler.interval = 3600000
# 自定义实现validationScheduler
sessionValidationScheduler = com.xx.SessionValidationScheduler
securityManager.sessionManager.sessionValidationScheduler = $sessionValidationScheduler
# 禁用周期验证 自行管理清除
securityManager.sessionManager.sessionValidationSchedulerEnabled = false
# 禁用无效session删除 保留做统计等
securityManager.sessionManager.deletInvalidSessions = false

# 字节数组 使用base64编码 或 16进制编码 字符串
securityManager.rememberMeManager.cipherKey = kxadadfA==
securityManager.rememberMeManager.cipherKey = 0x23423479234FA234
# collections 属性 逗号分隔
securityManage.sessionManager.sessionListener = $listener1, $listener2
# map属性 逗号分隔，k:v
myObject.mapPro = k1:v1, k2:v2

# 禁用某个过滤器
ssl.enabled = false

# 自定义配置authc登录页，用户-密码-记住属性
# 默认 username - password - rememberMe
authc.loginUrl = /login.jsp
authc.usernameParam = user
authc.passwordParam = pass
authc.rememberMeParam = remember
# 配置rememberMe的cooki属性
securityManager.rememberMeManager.cookie.name = foo
securityManager.rememberMeManager.cookie.maxAge = blah
# 自定义rememberMe管理
rememberMeManager = com.xxx.RememberMeManager
securityManager.rememberMeManager = $rememberMeManager

#============================================================
# 静态用户账户；适合少数用户或不需运行时变化
# 仅定义非空的users和roles会自动初始化一个iniRealm
# 格式 username = password, role1, role2
[users]
guest = guest, guest
# 密码加密， 指定iniRealm加密算法
root = 2bbsdfu9j234879sdf, admin

#============================================================
#
# 角色和权限关联，针对少数用户账户，不需要动态创建时
# 格式 roleName = perm1, perm2
[roles]
admin = *
schwartz = lightsaber:*
# 权限内含有逗号，需要""
goodguy = "print:5thfloor:print,info"

#============================================================
# web应用 url访问 自适应过滤器链匹配url，按定义顺序匹配，first match win
# 格式 url_ant表达式 = 过滤器链
# 默认过滤器，在[main]中默认配置启用：authc,anon,ssl,perms
# 可配置启用禁用某个过滤器而不用去删除 main中配置 ssl.enabled = false
# OncePerRequestFilter 控制过滤器链处理， isEnabled():判断是否启用禁用
# 通过请求path自定义判断是否启用过滤：覆盖PathMatchingFilter
[urls]
/login/* = ssl
/xxx/* = authc
/create/* = perms